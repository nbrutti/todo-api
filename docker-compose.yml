version: '3'

services:
  dev:
    container_name: todo_api_dev
    image: 'nestjs-api-dev'
    build:
      context: .
      target: development
      dockerfile: ./Dockerfile
    command: npm run start:debug
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      TYPEORM_SYNC: 'true'
    ports:
      - '5000:5000'
      - '9229:9229'
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - app-connect

  web:
    container_name: todo_api_prod
    image: 'todo-api-prod'
    build:
      context: .
      target: production
      dockerfile: ./Dockerfile
    command: npm run start:prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      TYPEORM_SYNC: 'false'
    ports:
      - '5000:5000'
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - app-connect

  postgres:
    container_name: postgres
    image: 'postgres:13-alpine'
    restart: always
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    ports:
      - '5432:5432'
    networks:
      - app-connect

networks:
  app-connect:
    driver: bridge
